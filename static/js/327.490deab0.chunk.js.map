{"version":3,"file":"static/js/327.490deab0.chunk.js","mappings":"0LACA,EAAyB,uB,SCEZA,EAAS,WACpB,OACE,gBAAKC,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,eACVC,OAAO,OACPC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAIhB,C,oHChBYC,EAAiB,mCAAG,gGAClB,mDADkB,SAIvBC,EAAe,IAAIC,gBAAgB,CACvCC,QAPU,qCAUNC,EARuB,UAClB,mDADkB,YAQNH,GARM,SASNI,MAAMD,GATA,WASvBE,EATuB,QAUfC,GAVe,sBAWrB,IAAIC,MAAJ,mCAAsCF,EAASG,SAX1B,wBAaVH,EAASI,OAbC,eAavBC,EAbuB,yBAetBA,EAAKC,SAfiB,kCAiB7BC,QAAQC,MAAR,MAjB6B,0DAAH,qD,iBCD9B,GAAgB,UAAY,wBAAwB,KAAO,oB,kBCuC3D,EAlCa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAoB,mCAAG,oGACEvB,IADF,OACrBwB,EADqB,OAE3BP,EAAUO,GACVL,GAAa,GAHc,2CAAH,qDAK1BI,GACD,GAAE,IAEH,IAAME,EAAOT,EAAOU,KAAI,SAACC,EAAOC,GAAR,OACtB,0BACG,KACD,UAAC,KAAD,CAAMC,GAAE,iBAAYF,EAAMG,IAAMC,MAAO,CAAEC,KAAMZ,GAA/C,UACG,IACAO,EAAMM,WAJFN,EAAMG,GAAK,IAAMF,EADJ,IASxB,OACGV,IAAa,SAAC7B,EAAA,EAAD,MACZ,+BACE,iBAAKC,UAAWC,EAAAA,UAAhB,WACE,eAAID,UAAWC,EAAAA,MAAf,iCACA,eAAID,UAAWC,EAAAA,KAAf,SAA0BkC,QAKnC,C","sources":["webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/getTrandingMovies.js","webpack://react-homework-template/./src/pages/Home.module.css?8f25","pages/Home.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\"};","import React from 'react';\nimport { Grid } from 'react-loader-spinner';\nimport css from './Loader.module.css';\nexport const Loader = () => {\n  return (\n    <div className={css.loader}>\n      <Grid\n        height=\"80\"\n        width=\"80\"\n        color=\"#4fa94d\"\n        ariaLabel=\"grid-loading\"\n        radius=\"12.5\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\n","const API_KEY = 'b942b8bf626a04f48b07153a95ee51a0';\n\nexport const getTrandingMovies = async () => {\n  const link = 'https://api.themoviedb.org/3/trending/movie/week';\n\n  try {\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n    });\n\n    const url = `${link}?${searchParams}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Fetch failed with status ${response.status}`);\n    }\n    const data = await response.json();\n\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Home_container__AHomM\",\"list\":\"Home_list__88Uf4\"};","import React, { useState, useEffect } from 'react';\nimport { getTrandingMovies } from 'components/getTrandingMovies';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './Home.module.css';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  useEffect(() => {\n    setIsLoading(true);\n    const fetcheTrandingMovies = async () => {\n      const trandingMovies = await getTrandingMovies();\n      setMovies(trandingMovies);\n      setIsLoading(false);\n    };\n    fetcheTrandingMovies();\n  }, []);\n\n  const list = movies.map((movie, index) => (\n    <li key={movie.id + '-' + index}>\n      {' '}\n      <Link to={`movies/${movie.id}`} state={{ from: location }}>\n        {' '}\n        {movie.title}\n      </Link>\n    </li>\n  ));\n  return (\n    (isLoading && <Loader />) || (\n      <>\n        <div className={css.container}>\n          <h1 className={css.title}>Trending this week</h1>\n          <ul className={css.list}>{list}</ul>\n        </div>\n      </>\n    )\n  );\n};\nexport default Home;\n"],"names":["Loader","className","css","height","width","color","ariaLabel","radius","wrapperStyle","wrapperClass","visible","getTrandingMovies","searchParams","URLSearchParams","api_key","url","fetch","response","ok","Error","status","json","data","results","console","error","useState","movies","setMovies","isLoading","setIsLoading","location","useLocation","useEffect","fetcheTrandingMovies","trandingMovies","list","map","movie","index","to","id","state","from","title"],"sourceRoot":""}