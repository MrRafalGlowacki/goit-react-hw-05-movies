{"version":3,"file":"static/js/509.5d434a9e.chunk.js","mappings":"6OAEaA,EAAU,mCAAG,WAAMC,GAAN,sFAClBC,EADkB,6CAC2BD,EAD3B,qBAIhBE,EAAe,IAAIC,gBAAgB,CACvCC,QAPU,mCAQVC,SAAU,UACVC,KAAM,IAGFC,EAVgB,UAUPN,EAVO,YAUCC,GAVD,SAWCM,MAAMD,GAXP,WAWhBE,EAXgB,QAYRC,GAZQ,sBAad,IAAIC,MAAJ,mCAAsCF,EAASG,SAbjC,wBAeHH,EAASI,OAfN,eAehBC,EAfgB,yBAiBfA,EAAKC,SAjBU,kCAmBtBC,QAAQC,MAAR,MAnBsB,0DAAH,sD,kBC+BvB,EA7BgB,WACd,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,MACAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,WAAMC,GAAN,8EAChBL,GAAa,GADG,SAESvB,EAAW4B,GAFpB,OAEVC,EAFU,OAGhBJ,EAAWI,GACXN,GAAa,GAJG,2CAAH,sDAMfI,EAAUR,EACX,GAAE,CAACA,IACJ,IAAMW,EACJN,EAAQO,OAAS,EAAjB,OACEP,QADF,IACEA,OADF,EACEA,EAASQ,KAAI,SAACC,EAAQC,GAAT,OACX,0BACE,4BACE,wBAAKD,EAAOE,UACZ,uBAAIF,EAAOG,cAHLH,EAAOd,GAAK,IAAMe,EADjB,KASb,iDAEJ,OAAQZ,IAAa,SAACe,EAAA,EAAD,MAAe,yBAAMP,GAC3C,C","sources":["components/getReviews.js","components/Reviews.jsx"],"sourcesContent":["const API_KEY = 'b942b8bf626a04f48b07153a95ee51a0';\n\nexport const getReviews = async movieId => {\n  const link = `https://api.themoviedb.org/3/movie/${movieId}/reviews`;\n\n  try {\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n      language: 'en - US',\n      page: 1,\n    });\n\n    const url = `${link}?${searchParams}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Fetch failed with status ${response.status}`);\n    }\n    const data = await response.json();\n\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from './getReviews';\nimport { Loader } from './Loader/Loader';\nconst Reviews = () => {\n  const { id } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [reviews, setReviews] = useState([]);\n  useEffect(() => {\n    const fetchById = async s => {\n      setIsLoading(true);\n      const moviesById = await getReviews(s);\n      setReviews(moviesById);\n      setIsLoading(false);\n    };\n    fetchById(id);\n  }, [id]);\n  const movieReviews =\n    reviews.length > 0 ? (\n      reviews?.map((review, index) => (\n        <div key={review.id + '-' + index}>\n          <div>\n            <h4>{review.author}</h4>\n            <p>{review.content}</p>\n          </div>\n        </div>\n      ))\n    ) : (\n      <div>there is no reviews</div>\n    );\n  return (isLoading && <Loader />) || <div>{movieReviews}</div>;\n};\n\nexport default Reviews;\n"],"names":["getReviews","movieId","link","searchParams","URLSearchParams","api_key","language","page","url","fetch","response","ok","Error","status","json","data","results","console","error","id","useParams","useState","isLoading","setIsLoading","reviews","setReviews","useEffect","fetchById","s","moviesById","movieReviews","length","map","review","index","author","content","Loader"],"sourceRoot":""}